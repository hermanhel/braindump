:PROPERTIES:
:ID:       1429A922-A7CD-435D-AE5D-ECE2907F4FDE
:END:
#+title: Python
#+HUGO_SECTION:main

* control flow

** Branching
#+begin_src python
  if predicate:
      statement(s)
  elif predicate:
      statement(s)
  else:
      statemnt(s)
#+end_src

** Loop
#+begin_src python
  while predicate:
      statement(s)
  else:
      statements(s)
  
  for item in seq:
      statements(S)
#+end_src

* Numpy
** Array concat
#+begin_src python
  import numpy as np
  
  np.append(ARRAY,X) # X could be a array or a number
  
  np.concatenate(ARRAY_A,ARRAY_B,ARRAY_C.....,axis=AXIS)
#+end_src

** numpy statistic
#+begin_src ipython :session :exports both
  import numpy as np
  data1 = np.random.randn(20)
  max = np.max(data1)
  min = np.min(data1)
  mean = np.mean(data1)
  variance = np.var(data1)
  standard_deviation = np.std(data1)
  median = np.median(data1)
  max,min, "Mean:{0:8.4f}".format(mean),variance,standard_deviation,median
#+end_src

#+RESULTS:
: # Out[1]:
: #+BEGIN_EXAMPLE
:   (1.1057284718245466,
:   -2.8926183169702746,
:   'Mean: -0.4856',
:   0.720476572143028,
:   0.8488089137980515,
:   -0.4399858919336215)
: #+END_EXAMPLE
# Out[8]:
 #+BEGIN_EXAMPLE
   (2.528059789910588,
   -1.0987823427134304,
   'Mean:  0.3014',
   0.8535340225783912,
   0.9238690505577027,
   0.1951073740774753)
 #+END_EXAMPLE

* Statistic
a simple exercise in 
** Import data
Use =pandas= =Dataframe= to import/store data is quite neat.
#+begin_src ipython :session statistic :file ./ipython-Hs9fOS.png :exports both
  import pandas as pd
  df = pd.read_csv("./resource/data.csv")
  df
#+end_src

#+RESULTS:
#+begin_example
# Out[4]:
,#+BEGIN_EXAMPLE
  fixed_acidity  volatile_acidity  citric_acid  residual_sugar  chlorides  \
  0               7.4              0.70         0.00             1.9      0.076
  1               7.8              0.88         0.00             2.6      0.098
  2               7.8              0.76         0.04             2.3      0.092
  3              11.2              0.28         0.56             1.9      0.075
  4               7.4              0.70         0.00             1.9      0.076
  ...             ...               ...          ...             ...        ...
  6492            6.2              0.21         0.29             1.6      0.039
  6493            6.6              0.32         0.36             8.0      0.047
  6494            6.5              0.24         0.19             1.2      0.041
  6495            5.5              0.29         0.30             1.1      0.022
  6496            6.0              0.21         0.38             0.8      0.020
  
  free_sulfur_dioxide  total_sulfur_dioxide  density    pH  sulfates  \
  0                    11.0                  34.0  0.99780  3.51      0.56
  1                    25.0                  67.0  0.99680  3.20      0.68
  2                    15.0                  54.0  0.99700  3.26      0.65
  3                    17.0                  60.0  0.99800  3.16      0.58
  4                    11.0                  34.0  0.99780  3.51      0.56
  ...                   ...                   ...      ...   ...       ...
  6492                 24.0                  92.0  0.99114  3.27      0.50
  6493                 57.0                 168.0  0.99490  3.15      0.46
  6494                 30.0                 111.0  0.99254  2.99      0.46
  6495                 20.0                 110.0  0.98869  3.34      0.38
  6496                 22.0                  98.0  0.98941  3.26      0.32
  
  alcohol  quality  color  is_red  high_quality
  0         9.4        5    red       1             0
  1         9.8        5    red       1             0
  2         9.8        5    red       1             0
  3         9.8        6    red       1             0
  4         9.4        5    red       1             0
  ...       ...      ...    ...     ...           ...
  6492     11.2        6  white       0             0
  6493      9.6        5  white       0             0
  6494      9.4        6  white       0             0
  6495     12.8        7  white       0             1
  6496     11.8        6  white       0             0
  
  [6497 rows x 15 columns]
,#+END_EXAMPLE
#+end_example

saving, use ~pd.to_csv("filename")~

** Finding elementlement
#+begin_src ipython :session statistic :file ./ipython-OlrjOq.png :exports both
  df.at[1,"quality"] #use at[rowname,columnname]
  df.iat[0,1] #use iat[rowindex,columnindex] y,
#+end_src

#+RESULTS:
: # Out[5]:
: 0.7

** Correlation
correlation can be scaled by the correlation coefficient
#+begin_src ipython :session statistic :file ./ipython-Y74oDw.png :exports both
  import numpy as np
  np.corrcoef(df.fixed_acidity,df.quality)[0,1]
#+end_src

#+RESULTS:
: # Out[8]:
: -0.0767432079096198
It's not large. and oppsite. Maybe large fixed acidity have a slight negative impact on the wine quality

** Linear Regression
#+begin_src ipython :session statistic :file ./ipython-MN5QbQ.png :exports both
  import statsmodels.api as sm
  #np.corrcoef(df.volatile_acidity,df.quality)[0,1] #: -0.265699477611468
  lr_model= sm.OLS(df.quality,df.volatile_acidity).fit() # OLS(y,X)
  lr_model.summary()
  #+end_src

#+RESULTS:
#+begin_example
# Out[15]:
,#+BEGIN_EXAMPLE
  <class 'statsmodels.iolib.summary.Summary'>
  """
  OLS Regression Results
  =======================================================================================
  Dep. Variable:                quality   R-squared (uncentered):                   0.762
  Model:                            OLS   Adj. R-squared (uncentered):              0.762
  Method:                 Least Squares   F-statistic:                          2.076e+04
  Date:                Tue, 22 Mar 2022   Prob (F-statistic):                        0.00
  Time:                        17:06:17   Log-Likelihood:                         -16074.
  No. Observations:                6497   AIC:                                  3.215e+04
  Df Residuals:                    6496   BIC:                                  3.216e+04
  Df Model:                           1
  Covariance Type:            nonrobust
  ====================================================================================
  coef    std err          t      P>|t|      [0.025      0.975]
  ------------------------------------------------------------------------------------
  volatile_acidity    13.6033      0.094    144.069      0.000      13.418      13.788
  ==============================================================================
  Omnibus:                     1411.191   Durbin-Watson:                   0.891
  Prob(Omnibus):                  0.000   Jarque-Bera (JB):             3102.947
  Skew:                          -1.246   Prob(JB):                         0.00
  Kurtosis:                       5.292   Cond. No.                         1.00
  ==============================================================================
  
  Notes:
  [1] RÂ² is computed without centering (uncentered) since the model does not contain a constant.
  [2] Standard Errors assume that the covariance matrix of the errors is correctly specified.
  """
,#+END_EXAMPLE
#+end_example

#+caption: a full demo
#+begin_src ipython :session statistic :file ./ipython-lq95Qk.png :exports both :results raw drawer
  import numpy as np
  import pandas as pd
  import matplotlib.pyplot as plt
  import statsmodels.api as sm
  
  #1. load the data from csv into Dataframe
  df = pd.read_csv("./resource/data.csv")
  #2. find the correlation between volatile_acidity and quality
  print("Correlation coefficient: ",np.corrcoef(df.quality,df.volatile_acidity)[0,1])
  #3. make X and y for Regression Model
  y = df.quality
  X = df.volatile_acidity
  X = sm.add_constant(X) #adds a constant term to the predictor
  #4. build and fit the regression model using OLS(ordinary least square)
  lr_model = sm.OLS(y,X).fit()
  print(lr_model.summary())
  #5. pick 100 points eauqlly spaced from min to max
  X_prime = np.linspace(X.volatile_acidity.min(),X.volatile_acidity.max(),100) #linspace?
  X_prime = sm.add_constant(X_prime) #add_sonstent?
  #6. calculate the predicated point
  y_hat =lr_model.predict(X_prime)
  #7.plotting
  
  #datapoints
  plt.scatter(X.volatile_acidity,y)
  plt.xlabel("volatile acidity")
  plt.ylabel("quality")
  
  # add regression line in red
  plt.plot(X_prime[:,1],y_hat,"red",alpha = 0.9)
#+end_src

#+RESULTS:
:results:
# Out[19]:
[<matplotlib.lines.Line2D at 0x7f98aa5c2130>]
[[file:./obipy-resources/QJa4nJ.png]]
:end:

** DONE Multiple Linear Regression
CLOSED: [2022-03-22 Tue 18:00]
:LOGBOOK:
- State "DONE"       from              [2022-03-22 Tue 18:00]
:END:
#+caption: chlorides -> density
#+begin_src ipython :session statistic :file ./ipython-fnJgyu.png :exports both :results raw drawer
  import numpy as np
  import pandas as pd
  import matplotlib.pyplot as plt
  import statsmodels.api as sm
  
  #1.load the csv to dataframe
  df= pd.read_csv("./resource/data.csv")
  #2. see the effectiveness of the linear regression
  y = df.density
  X = df.chlorides
  X = sm.add_constant(X)
  lr_model = sm.OLS(y,X).fit()
  lr_model.summary()
  
  plt.figure()
  plt.scatter(df.chlorides,df.density)
  plt.xlabel("chlorides")
  plt.ylabel("density")
  #R-squared - 0.13
#+end_src

#+RESULTS:
:results:
# Out[54]:
Text(0, 0.5, 'density')
[[file:./obipy-resources/v6XBul.png]]
:end:
#+caption: residual_sugar -> density
#+begin_src ipython :session statistic :file ./ipython-JNuho1.png :exports both :results raw drawer
  y = df.density
  X = df.residual_sugar
  X = sm.add_constant(X)
  
  lr_model = sm.OLS(y,X).fit()
  lr_model.summary()
  
  plt.figure()
  plt.scatter(df.residual_sugar,df.density)
  plt.xlabel("residual_sugar")
  plt.ylabel("density")
  # r-squred = 0.30
#+end_src

#+RESULTS:
:results:
# Out[60]:
Text(0, 0.5, 'density')
[[file:./obipy-resources/xMjtCl.png]]
:end:

#+caption: residual_suagr, chlorides -> density
#+begin_src ipython :session statistic :file ./ipython-QO0XhX.png :exports both
  y = df["density"]
  X = df[["residual_sugar","chlorides"]]
  X = sm.add_constant(X)
  
  lr_model = sm.OLS(y,X).fit()
  lr_model.summary() #r-squred = 0.497
#+end_src

#+RESULTS:
#+begin_example
# Out[61]:
,#+BEGIN_EXAMPLE
  <class 'statsmodels.iolib.summary.Summary'>
  """
  OLS Regression Results
  ==============================================================================
  Dep. Variable:                density   R-squared:                       0.497
  Model:                            OLS   Adj. R-squared:                  0.497
  Method:                 Least Squares   F-statistic:                     3204.
  Date:                Tue, 22 Mar 2022   Prob (F-statistic):               0.00
  Time:                        18:32:44   Log-Likelihood:                 30757.
  No. Observations:                6497   AIC:                        -6.151e+04
  Df Residuals:                    6494   BIC:                        -6.149e+04
  Df Model:                           2
  Covariance Type:            nonrobust
  ==================================================================================
  coef    std err          t      P>|t|      [0.025      0.975]
  ----------------------------------------------------------------------------------
  const              0.9905   6.14e-05   1.61e+04      0.000       0.990       0.991
  residual_sugar     0.0004    5.6e-06     68.644      0.000       0.000       0.000
  chlorides          0.0378      0.001     49.696      0.000       0.036       0.039
  ==============================================================================
  Omnibus:                      542.900   Durbin-Watson:                   1.063
  Prob(Omnibus):                  0.000   Jarque-Bera (JB):             3234.966
  Skew:                          -0.123   Prob(JB):                         0.00
  Kurtosis:                       6.448   Cond. No.                         210.
  ==============================================================================
  
  Notes:
  [1] Standard Errors assume that the covariance matrix of the errors is correctly specified.
  """
,#+END_EXAMPLE
#+end_example

#+begin_src ipython :session statistic :file  :exports both
  X.residual_sugar
#+end_src

#+RESULTS:
#+begin_example
# Out[67]:
,#+BEGIN_EXAMPLE
  0       1.9
  1       2.6
  2       2.3
  3       1.9
  4       1.9
  ...
  6492    1.6
  6493    8.0
  6494    1.2
  6495    1.1
  6496    0.8
  Name: residual_sugar, Length: 6497, dtype: float64
,#+END_EXAMPLE
#+end_example

#+caption: plot it in 3D
#+begin_src ipython :session statistic :file ./ipython-kQSEB1.png :exports both :results raw drawer
  from mpl_toolkits.mplot3d import Axes3D
  X_axis,Y_axis = np.meshgrid(np.linspace(X.residual_sugar.min(),X.residual_sugar.max(),100),np.linspace(X.chlorides.min(),X.chlorides.max(),100))
  
  #1. calculate the Z_axis use the linear model and X,Y's from above
  Z_axis = lr_model.params[0] + lr_model.params[1] * X_axis + lr_model.params[2] * Y_axis
  fig = plt.figure(figsize = (12,8))
  ax = Axes3D(fig,azim=-100)
  #2. plot the plane
  ax.plot_surface(X_axis,Y_axis,Z_axis,alpha = 0.5, linewidth=0)
  # plot the data points
  ax.scatter(X.residual_sugar,X.chlorides,y)
  ax.set_xlabel("residual_suagr")
  ax.set_ylabel("chlorides")
  ax.set_zlabel("quality")
#+end_src

#+RESULTS:
:results:
# Out[76]:
Text(0.5, 0, 'quality')
[[file:./obipy-resources/aAEEfp.png]]
:end:

* Visuals

** histogram
#+BEGIN_SRC ipython :session :ipyfile /Users/hermanhe/Notes/RoamNotes/resource/pyDBRhQm.png :exports both output :results raw drawer
  %matplotlib inline
  import matplotlib.pyplot as plt
  
  plt.figure()
  hist1,edges1 = np.histogram(data1,bins=100)
  plt.bar(edges1[:-1],hist1,width=edges1[1:]-edges1[:-1])
  
  plt.show()
  edges1,hist1
#+END_SRC

#+RESULTS:
:results:
# Out[2]:
#+BEGIN_EXAMPLE
  (array([-2.89261832, -2.85263485, -2.81265138, -2.77266791, -2.73268445,
  -2.69270098, -2.65271751, -2.61273404, -2.57275057, -2.53276711,
  -2.49278364, -2.45280017, -2.4128167 , -2.37283323, -2.33284977,
  -2.2928663 , -2.25288283, -2.21289936, -2.17291589, -2.13293243,
  -2.09294896, -2.05296549, -2.01298202, -1.97299856, -1.93301509,
  -1.89303162, -1.85304815, -1.81306468, -1.77308122, -1.73309775,
  -1.69311428, -1.65313081, -1.61314734, -1.57316388, -1.53318041,
  -1.49319694, -1.45321347, -1.41323001, -1.37324654, -1.33326307,
  -1.2932796 , -1.25329613, -1.21331267, -1.1733292 , -1.13334573,
  -1.09336226, -1.05337879, -1.01339533, -0.97341186, -0.93342839,
  -0.89344492, -0.85346145, -0.81347799, -0.77349452, -0.73351105,
  -0.69352758, -0.65354412, -0.61356065, -0.57357718, -0.53359371,
  -0.49361024, -0.45362678, -0.41364331, -0.37365984, -0.33367637,
  -0.2936929 , -0.25370944, -0.21372597, -0.1737425 , -0.13375903,
  -0.09377556, -0.0537921 , -0.01380863,  0.02617484,  0.06615831,
  0.10614177,  0.14612524,  0.18610871,  0.22609218,  0.26607565,
  0.30605911,  0.34604258,  0.38602605,  0.42600952,  0.46599299,
  0.50597645,  0.54595992,  0.58594339,  0.62592686,  0.66591033,
  0.70589379,  0.74587726,  0.78586073,  0.8258442 ,  0.86582766,
  0.90581113,  0.9457946 ,  0.98577807,  1.02576154,  1.065745  ,
  1.10572847]),
  array([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 1, 1, 1, 1, 0, 1, 1,
  0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]))
#+END_EXAMPLE
[[file:/Users/hermanhe/Notes/RoamNotes/resource/pyDBRhQm.png]]
:end:
#+begin_src python
return [1,2,3,4,5,6,7][1q:]
#+end_src

#+RESULTS:
| 2 | 3 | 4 | 5 | 6 | 7 |

** Pie chart
*** Basic setting
setting up a pie chart
#+begin_src python
  import matplotlib.pyplot as plt
  import palettable
  #dpi setting
  my_dpi=96
  # canvas
  plt.figure(figsize=(480/my_dpi,480/my_dpi),dpi=my_dpi)
  
  
  plt.pie(x=[1,2,3],#æå®ç»å¾æ°æ®
          labels=['A','B','C'],#ä¸ºé¥¼å¾æ·»å æ ç­¾è¯´æ
         )
  plt.show()
#+end_src
*** Colors
#+begin_src python
plt.pie(x=[1,2,3],
lables = ['a','b','c']
colors = ["#d5695d",,] # color list
)
#+end_src>
*** Explode
the bigger the value, the farther the piece
#+begin_src python
plt.pie(x=[]
lables = []
explode = [0,0.2,0])
#+end_src>
*** Format display data
#+begin_src python
plt.pie(
x=[],
labels=[],
autopct='$.2f%%' # æ ¼å¼åè¾åºç¾åæ¯
)
#+end_src>
* Pandas
** To apply operation on column
use =map= and =lambda= (like in clojure)

* I/O
** Keyboard
*** Raw_input
take raw_input
*** Input
also take python expression and return the result

* R/W Files
** Files
Use =file= object to do most of things
*** open
#+begin_src python
file object = open(file_name [, access_mode][, buffering])
#+end_src
*** Write
#+begin_src python
fileObject.write(string)
#+end_src
*** Close
#+begin_src python
fileObject.close()
#+end_src>
** jasn
Objects could be easily stored using jasn.
*** Load from json
**** load
#+begin_src python
  object = jason.loads(stringdata
                       )
#+end_src
When loading from a file, use =read()= method of the file object to get string.
#+begin_src python
data = json.loads(open("file_name").read())
#+end_src
*** write into json
**** dumps
dumps only recieve primitive types in python.
Use =list()= to transform =ndarray= defined in =NumPy= to plain list
#+begin_src python
data = jason.dumps(object)
#+end_src

list example
#+begin_src python :result output code
  import json
  import numpy
  
  nparray = numpy.zeros(3)
  nparray[0] = 1
  # data = json.dumps(list(nparray))
  data = json.dumps([1,2,3])
  m = print(data)
  print("2")
  return 2
#+end_src

#+RESULTS:
: None

#+begin_src python
1+2  
#+end_src  

#+RESULTS:
: None


#+begin_src emacs-lisp
  (+ 1 2)
#+end_src

#+RESULTS:
: 3
* Strings
** format string
#+begin_src python

#+end_src
* GUI
** pyqt6
#+begin_src python
import sys

from PyQt6.QtCore import QSize, Qt
from PyQt6.QtWidgets import QApplication, QMainWindow, QPushButton


# Subclass QMainWindow to customize your application's main window
class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()

        self.setWindowTitle("My App")
        button = QPushButton("Press Me!")

        # Set the central widget of the Window.
        self.setCentralWidget(button)


app = QApplication(sys.argv)

window = MainWindow()
window.show()

app.exec()

#+end_src

#+RESULTS:
: None

