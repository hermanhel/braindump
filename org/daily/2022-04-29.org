:PROPERTIES:
:ID:       BF95BUICK3-47D3-412E-92E7-CFC2B1081DE2
:END:
#+title: 2022-04-29
#+HUGO_SECTION:daily
#+filetags: :draft:
#+filetags: :draft:

* How to do academic research
:PROPERTIES:
:ID:       A8010A84-831D-453F-9F05-D2DA54152E7F
:END:
Academic research based on:
+ Reading Articles of others hypothesis and experiment/proof
+ Making own hypothesis and expriment/proof
+ Constructing relations and structures between facts and theories/concepts
+ Telling other people your progress(often by writing articles and publishing them.)
** 1. Find resources
The materials of academic research is article, idea, or experiment/data.
=resource= of these materials is juicy place where they could be find effectively.

Resource include Articles database, Research lab opportunity, Ideas of mine, Reliable people, Reliable journals/websites.blogs, Good Booklist, my notebooks,
[[https://www.quertime.com/article/15-websites-to-find-academic-journals-articles-and-books/][this blog]] provide good information of 100 research websites.
*** Resource list
**** Articles database
***** XJTLU database
https://lib.xjtlu.edu.cn/
***** Google Scholar
***** frontiersin.org
free, full text access, pdf 
***** sciencedirect
[[https://www.sciencedirect.com/][ScienceDirect]], search in journals. some journals change to limited access
***** ResearchGate
[[https://www.researchgate.net/][ReaserchGate]]
+ some have full text
+ could reach to author
+ more like a community
+ could have an account there
***** Springerlink
[[https://link.springer.com/][Springerlink]]
+ some have full text
+ have journal
***** [not using it][[http://libserver.cedefop.europa.eu/][VET-Bib]]: basically european and in european langauges
***** [[https://www.academia.edu/][Academia.edu]]
+ kind of annoy with its premium plan
+ the premium plan is good indeed, but expansive, 90 dollar/year
+ have pdf.
+ have lots of papers
+ doi could be missing
***** [[https://arxiv.org/][ArXiv.org e-Print Archive]]
a repository of papers
+ pdf
+ very new things
+ maybe not complete

**** Research Lab opportunity
**** My Ideas
**** Reliable people
**** Reliable Information Stream
including jounals, websites, blogs.etc
**** Good Booklist
***** Brain-machine interface
****** Brain-machine interface : circuits and systems by Amir Zjajo
**** My Notebook

*** Resource list update

* Programming sounds
Knowing how the sounds in songs can be described and programmed to speak.

* Plan: Drink water, Exercise, Learn Computer Science.

* 我很期待去討一個人的歡心.
我發現自己覺得,如果有一個可愛的女孩在,我會發現去與她接觸是很有趣的事情.到身體接觸,如果實在很熟識了,到了極親密的地步,玩她的腳,撫摸她的身體,和她一起做各種事情,pair programming, 開會,吃東西,寫小說,做各種遊戲,或者一起做研究打比賽,想象中來說,都是很有趣,我很願意做的事情.這樣與人的接觸,也許是我所很渴望的.

但是如果這個人不那麼可愛,有一些我很厭煩的性格、行為或者信念,我也不想改變她,整個事情就變得無聊.我並不想和覺得不酷的人一起做任何事.

* Where am I?
我在當下的計畫,已經進行到哪一步?這個積木已經搭建成什麼樣子了?

* 我還是需要早上出去跑個步的.
這一天會變得很積極,無論做什麼事情都會感覺有趣,像是接下來的西語課,我不想去上了,但如果早上早起去跑了步,或者做了什麼其他運動的話,我會很期待的.

然而現在我無法期待,強行告訴自己自己期待,也太明了這是一個謊言,而沒法起作用.

* session和time out和focus和dumping
1個session,2個小時time out,一個focus.

我把focus的topic, =Linear algebra=, 放在dailypage的最下.我開始想要畫腳,這和linear algebra有關嗎?我可是已經決定好這兩個小時的session里完全集中在linear algebra上了喔?



經驗已經告訴我,當「我為一個session好好dump過意識環境後」,「這個session將很開心,很有效」.而在linear algebra的session正中,不做dumping而去畫腳,就會擾亂意識環境,讓事情變得很難管理,而同樣也是經驗告訴我,無論一件事我有多喜歡,多熟捻,如果沒有dumping,擾亂一個session的focus,大概率會是很難受地、很沒有創造力地、很累地、很非主動地、毀滅管理地、清空精力地收場.

這樣看來,context的集中,來保持一個空間上的隔離、像是1+1不會得出2i一樣,是很重要的呢!

** 對於性和音樂和緊縛和遊戲和網文和電影
好像,它們是我隨時都能做,隨時都喜歡做的事,所以當我開始神遊時,我常常向其中的某幾個傾向,似乎這樣就一定能收穫我之前做它們時的快樂、自信和滿足.但是經驗上並不是這樣.這樣隨時隨地地訪問並非給我帶來隨時隨地的快樂,而是反而讓我對它們失去興趣,它們好像失去魔力,變得一點也不有趣.

我想,它們也是需要對它們的尊重,需要它們自己的[[dedicated session]]來讓我能夠好好享受它們.就好像很好吃的餅乾,如果嘴裏特別幹的話,吃起來一樣沒有味道,而且會加重口幹,甚至讓喉嚨和鼻子變得難受.而加上適量地熱水,味蕾才能好好擁抱餅乾的香味,才能夠好好享受好吃餅乾帶來的開心.因為口乾舌燥而覺得不適的時候,想起好吃餅乾的舒適,嘗試用餅乾來變得舒服起來的話,是確實只能「適得其反」的啊!

* dedicated session
:PROPERTIES:
:CUSTOM_ID: dedicated session
:END:
一個完整的dedicated session大約有兩到三個小時長,包括三個重要的動作:
+ [[Dumping]]
+ [[Doing]]
+ 和 [[Releasing]]
** Dumping
是在一個session正式開始之前,首先把腦子清空,不再想其他事情的動作.這個動作非常重要,因為它保證這個session是:
+ dedicated: 從開始的時候,確實是不分心的
+ 有精力的: 精力從之前煩惱的事情上拿出來,可以放在session里要做的事情上
+ 冷靜聰明的: 最普通的做一件事,而不同時擔心其他,慢慢來,所以能夠看到更多,能夠活用經驗和記憶的知識與原則,所以是冷靜聰明的.

dumping就好像是把桌子上的所有東西一件一件拿下去放到看不見的地方一樣.這樣,不花費太多精力,而桌子上沒有東西的時候,當然也只有一個樣子,保持了一個穩定的開始狀態.

在不做dumping的時候,也許也能達到上面的要求,但是都沒有保證,完全依賴於上一個動作的結束時的狀態.如果從早上起床、晨跑,一天都很冷靜快活,之前也沒有做什麼很耗腦力的動作,或者有想到休息,那就還好;而如果那個動作自己已經是分崩離析,就沒有辦法,只好跟著分崩離析了.因此,dumping也是一個保險絲,保證在採取dedicated session的情況下,如果上一個動作不小心分崩離析了,比如說學習的時候去......看了社交媒體!然後看著看著就從一個群看到另一個,然後去了瀏覽器!搜索一個群里看到的名詞......然後搜到一半想到另一個事也很困擾!呼呼呼,這簡直就是我最日常的惡夢了呢w 這些一切都沒有記錄下來,搞到精疲力竭得不行之後,終於想到,「本來應該要做「dedicated session」的來著,懊惱不已的時候」,只要好好dump過,照樣也能或多或少回到那個理想的狀態,能夠好好地像沒事人一樣再開始一個像樣的dedicated session.
*** dumping的方法
最簡單的,最direct的方法,當然就是冥想啦!想像著把腦袋裡面的中的桌子上的東西一件一件放到地下,不去管它們,就已經可以有很好的作用了.如果把桌子真的整理地乾乾淨淨,再在牆壁上貼上「Dedicated Session: XXX」來提醒自己,效果也許會更棒呢!

有些人可能也會發現一些physical的辦法有效,比如做一個很精確,或者強度大時間小的運動,像是深蹲、碰腳尖之類的,或者喝一大杯熱水、大聲讀一節自己喜歡的詩歌/文章等等.許多演員的演劇訓練也都有類似的功效.

檢驗標準是:想不到別的東西啦!只要能讓自己什麼都想不到,同時腦袋裡面也沒有tension,感覺放鬆,就都是有效的dumping!

只是要注意,dumping可不要花太久了,要是把上面一連串都做一遍,確實放鬆了,但是快要沒有時間做事情,不就又要開始緊張焦慮了嘛ww 五六分鐘能夠結束,那就是最好了.
** Doing
重要的事情有:
+ 分開來!:把長長的,大概有個兩三小時的Doing環節,最好分成半小時左右一個的小節們,或者在感覺腦袋木木的時候就趕快停下,看一看鍾,把開始到那時的時間定為小節的長度.
  在小節與小節之間,要好好地休息,讓腦袋木木地感覺消失,或者小小地做一些dumping/releasing的活動,不過因為反正在一個主題下面,後續的小節本來也不會像開始一樣累,休息的活動就不用像session開始的dumping一樣長,檢驗到腦袋不木木地了,就是目標達成!當然,如果在小節裡面是坐著的話,小節之間當然最好也要活動活動身體啦!對整個身體的知覺,也是保持腦袋清醒的正面因素呢!有人把這種知覺,叫做「正念」,發展出了各式各樣的技巧,如果你覺得這個名字很酷的話,不妨去嘗試看w
+ 集中!:注意,注意!這可是一個session喔!無論有多少部分都是一個session!至於為什麼,在開始的時候就已經決定了,所以是一個session!
  可以把session的主題寫下來,放在一眼就可以看見的地方,當要開始一個新的活動的時候就看一眼,考慮一下是不是同一個session的動作,如果不是的話,就寫到TODO list裏,之後再去做它.像是我,基本把所有事情都寫在org-roam的daily page裏面,就把dedicated session的topic寫在它的地步: =dedicated session: Linear Algebra= 當我要開始一個新的活動的時候,就 ~C-c n d t~, 看一看是否符合現在的topic.當然,如果你也用emacs的話,你也可以寫一個自己的 ~dedicated session~ 函數.

對於dedicated session來說,產出最多的就是Doing的環節了!無論做了什麼有趣的事情,肯定都是在Doing的環節裏,回憶中,也都是Doing裏面美好回憶最多,畢竟Dumping和Releasing可並不是開心的緩建,而是避免沮喪的環節呀.
但是,也千萬不要忘記,如果沒有dumping和releasing的環節在,doing的環節就會相當地脆弱了,說不定可能一週也只會有一兩次舒服的Doing,其他時間都是在自責、懊惱、怨毒和對自己能力的不信任與自我埋汰中度過!說不定歷史上許多在才華的課題上煩惱大半輩子的藝術家,只是沒有能夠保持doing時的狀態而已呢.有時候,像是我忘記哪個中世紀的畫家一樣,「沒有模特他就不畫」,只不過,不僅僅是在沒有模特的時候不浪費時間畫畫,而且和模特們約好/搬到模特多的街區,保證自己想畫畫的時候總能找到模特,也是不錯的呢!
*** 音樂與酷酷的感覺
有很多人總是疑惑,在做事情的時候究竟該不該放音樂呢?有的人說放音樂會更專注,有的人說會分心,還有人和稀泥說什麼,「每個人都有各自的情況」,搞得人頭大,不知道怎樣做好.

Scott Young的新書 /Ultralearning/ 中關於 /Focus/ 的章節提到,關於環境中「聲音」的因素,在實驗中發現和人「疲憊」的程度一起作用影響 /Focus/, 在人累的時候聲音大點好,人不累的時候聲音小點好.

但是很多時候我們也不只是把背景音聲作為Focus的激活劑,而是覺得這樣「這樣很酷」,能夠營造酷酷的氛圍,讓我們有自己正在做酷酷的事情的感覺.

我覺得這種感覺,也是十分重要的!如果自己並不是在做酷酷的事情,那當更酷的事情出現,自然就會想要分心去做更酷的事情,「不在無聊的事情上浪費人生」嘛!只有已經稍微滿足自己當下session的酷酷程度,才能安心下來做事,對突然襲來的念頭有抵抗力.想想,如果你在辦公室裡做很無聊的事情,突然樓下發生車禍,當然會很想去圍觀吧?但如果你正在實驗室進行可能改變領域現狀的實驗,即使是同事出車禍都未必能奪過你的注意力吧?

所以,我覺得,如果你想要放音樂,僅僅是因為這樣酷酷的,那就是很充足的理由了!應該把這一條寫進憲法,「人生來有追求酷酷的狀態的權利」!

不過,在曲目的選擇上,出了保證曲子酷酷的之外,最好還是避開自己聽得懂的曲子,比如說流行歌曲啊,或者比較爛大街的旋律啊,因為它們實在是太容易讓人想起和它們相關的回憶了!一不小心就會因為過去的記憶淚流滿面!一定要小心避開 /Adele/ 的歌!

如果是我的話,我有時會在doing的時候放一些 /Hard Bop/ 的爵士樂,特別是一些我沒聽過,一點也不熟,連旋律還是即興都分不清的. 我特別喜歡 /Charlie Parker/ 的 /Anthropology/, 但是如果在doing的時候放,一不小心就跟著唱起來了,就沒辦法放了. 或者,像 /Thelonious Monk/ 這樣,反正也記不住他彈些什麼鬼東西的,熟悉的曲子倒也沒太大關係. 快的速度和節奏還會讓腦袋感覺興奮呢!
*** 退後一步的機會
計畫是很重要的,但是很多時候一些計畫往往依賴一些沒有獲取,暫時也不知道怎麼獲取的知識,就只能夠走一步看一步.在這種時候,休息給了一個很好的「退後一步的機會」. 我在做這個網站的時候,參考了jethro kuan的braindump.我看到他那個網站很酷,也很符合我想要的樣子,就想「就學他做網站的辦法吧?」,因為他有發布網站的源碼.他使用ox-hugo,和hugo這兩個工具做的.我一開始什麼都不懂,感覺「用org-roam的文件夾一下子就生成這個網站了!」好像是魔法一樣.因為沒用過hugo,也看不大懂他倉庫裏都是什麼東西,頭就大起來,中途放棄了好多次.後來有一次我刪來刪去做實驗,終於快要成功,但是emacs 在terminal裏運行batch mode總是不成功,就難受很久.再然後我就去做了一遍hugo的quickstart,還是沒有頭緒.各種信息在我腦子裡轉轉,但是沒有辦法連結出一個能夠成功設置這個網站的辦法.在之後休息的時候,我重新想了想hugo和ox-hugo的機理,突然發現,我把org文件都用hugo轉成md之後,存到content裏面,然後運行hugo做好public,把public傳到GitHub上面,好像就直接deploy成功了.結果也確實是這樣.

** Releasing
不僅是在doing開始的時候要好好地放開之前的事情,在doing結束的時候,也要好好地放開.在Releasing時,要做的事有:
+ Log
  把做下的工作簡述寫入log,可以給人round up的感覺,同時也可以清晰地做出一個本身完全的總結給之後使用,防止之後需要相關信息的時候要再次進入這個session的context.
+ 放鬆
  和dumping的過程大致上類似.

結束的時候不要急著走!要好好收工才行.使用dedicated session的一個好處就是在於,當附近時間都在一個主題周圍時,後來的時間相比最開始的時間將會更加輕鬆,這是得益於context.而如果在doing之後不release,直接去買菜,或者做運動,相當於這個context一直持續下去,卻加入了不相關的信息.這就像本來給一個工作計時,但是等到結束之後好久才想起來停止,完全不知道計時的哪一部分是這份工作,哪一部分不是.
在不release的情況下一直繼續,但是沒有了doing的小節管理,很容易就會進入混亂狀態,而程式化地release過,就能夠比較好地管理,能夠保留精力提醒自己下一個dedicated session要dump先.值得一提的是,僅僅是複述一遍做過的事情,就足夠給人很強的結束和安心感,而如果不這麼做,它們很傾向於一直懸在空中,給後來的session一個context無關的tension.我想,這可能是因為人果然還是需要先陳述過來認識一個事務,才能著手理智地處理它.

** dumping的方法

* 發現新快捷鍵!
M-`, 會顯示當下應用的窗口,在裡面循環!估計是alt-tab的一個小功能

* Dedicated session 示範機器
:PROPERTIES:
:ID:       8A3E722A-AB5C-4AE5-ABEF-5DC686366B89
:END:

** source org file
a hierachy method is to first have path to the time, and then the entries
#+caption:hierachy
#+begin_example
- dumping
-- dumping methods
--- method1: xxx
description
--- method2: xxx
description
- doing
-- rest methods
--- method 1: xxx
description
--- method 2: xxx
description
- releasing
#+end_example
I find that almost all text that need resource are resting methods. and they are very likely to duplicate, so I could just make a resting methods subtree, and entrys with tag signifying which parts of the sesssion they could be applied to. 
a tags method is to 
#+caption:tags
#+begin_example
- resting methods
-- method 1: xxx :dumping:doing:releasing:
#+end_example

** journal org file
#+caption:journal file structure
#+begin_src ditaa
  ---Year	
      +---Jan   
      |	      															
      +---Feb   
           +--11
           |
           +--12
               +---session 1
               |    +---Dumping
               |    |    +---time:start and stop
               |    |    +---method:selected from source
               |    |    +---extra log: from the log function
               |    |
               |    +---Doing
               | 	  |    +---topic
               |    |    +---bar 1
               |    |    +---rest 1
               |    |    +---bar 2
               |    |    |    +--time: start and stop
               |    |    |    +--extra log:from the log function
               | 	  |    |    +--bar summary:from the prompt
               | 	  |    |
               | 	  |    +---rest 2
               |	  |	    +--time: start and stop
               |	  |	    +--rest method:from list
               |	  |	    +--extra log:from the log function
               |	  |
               |	  +---Releasing
               |	  .    +--time: start and end
               |	  .    +--session summary: from prompt, what is done
               |	  .    |		   in this session.
               |	  .    +--rest method: from list
               |	  .    +--extra log: from the log function
               |	  .
               |	  ....[maybe]Statistics
               |		      +--length of session
               |		      +--length of bar
               |		      +--number of bars
               |		      +--rest time
               |		      +--working time
               |		      +--ratio of working/whole
               |		      +--...
               |
               +---session 2
                    ----...
#+end_src
* Dedicated session 函數
:LOGBOOK:

:END:
可以寫一個dedicated session函數專門提供dedicated session的prompt.有點類似org-clock,也許可以參考.

把配置的模板/數據存儲在var/.emacs.d/或者init.el裏面.
我希望可以寫自己的record函數,自己定義log的方法,或者放進daily page,或者有單獨的文件.
** entry: dedicated-session
這個函數是整個session的main method
1. 會首先call dumping.
2. 在dumping完之後,進入doing
3. 在確定doing結束之後,進入releasing
** dedicated-session-dumping
:LOGBOOK:
CLOCK: [2022-05-03 Tue 14:45]--[2022-05-03 Tue 17:45] =>  3:00
CLOCK: [2022-05-02 Mon 14:41]--[2022-05-02 Mon 17:10] =>  2:29
:END:
1. 紀錄dumping開始時間
2. 進入dumping的介面
   可以是一個新的buffer,把自己變成dumping-buffer
3. 顯示dumping的insturction
   可以有default,或者在配置文件裏顯示
   可以給一些dumping的選項
4. 結束dumping
   給一個log紀錄做了什麼(像magit的commit)
   在使用C-c C-c後結束dumping
5. 把dumping的紀錄寫入設置好的dedicated-session-journal(或者使用dedicated-session-log進行紀錄)
** dedicated-session-doing
1. 輸入session的主題和預計時長.當預計時長到的時候提示提醒.
2. call dedicated-session-doing-start-bar
*** dedicated-session-doing-topic
顯示當前session的主題
*** dedicated-session-visit-journal
可以看當前session的journal entry
*** dedicated-session-doing-start-bar
開始doing的一個小節.紀錄時間到dedicated-session-doing-current-bar-start-time.如果當前dedicated-session-bar-length是nil,就沒有停下來的鬧鐘,如果有,就在鬧鐘到期時call dedicated-session-doing-end-bar
*** dedicated-session-doing-end-bar
1. 紀錄時間到dedicated-session-doing-current-bar-end-time.當dedicated-session-bar-length是nil,把end-time和start-time的差距拿來做bar-length.當差距和bar-length不一樣時,把差距拿來做bar-length紀錄兩個時間到log.紀錄bar-length到log
2. call dedicated-session-doing-rest
*** dedicated-session-doing-rest
顯示rest的prompt.可以做選項,然後選中的直接進入log.也可以做log提示紀錄這個bar都做了什麼

有點像dumping,看看能不能寫更細的函數兩個一起用.在這個介面call start-bar再進入下一個小節
*** dedicated-session-doing-capture
可以把筆記寫在journal裏.或者可以自定義函數記一些筆記
*** dedicated-session-doing-exit
結束doing的環節,進入releasing
** dedicated-session-releasing
*** dedicated-session-releasing-log
進入介面,寫關於整個session的log.使用dedicated-session-log進行紀錄
*** dedicated-session-releasing-free
提示休息的prompt.可以把休息的method計入log.
在結束後結束這一個dedicated-session的process.
** dedicated-session-log loc text
一個自定義的log函數,憑藉'dumping 'doing-bar 'doing-rest 'releasing arg來分辨記到什麼位置.
** examples
I think the following functions should help
+ org-capture
  use C-c C-c to exit
+ magit-commit
** 紀錄時間:使用timestamp,和property
(dedicated-session-record-time)它會
1. 測現在是在哪個階段(使用表示階段的var)
2. 走到journal裏,找到相對應的heading
3. 看有沒有start time,有的話就設置end time,沒的話就設置start time
*** 
** Writing functions! [4/5]
:LOGBOOK:
CLOCK: [2022-04-30 Sat 17:15]--[2022-04-30 Sat 17:20] =>  0:05
:END:
*** DONE ~dedicated-session~
CLOSED: [2022-05-03 Tue 17:47]
:LOGBOOK:
- State "DONE"       from "TODO"       [2022-05-03 Tue 17:47]
CLOCK: [2022-04-30 Sat 15:47]--[2022-04-30 Sat 17:08] =>  1:21
- Note taken on [2022-04-30 Sat 17:08] \\
  finished the speicifications
CLOCK: [2022-04-30 Sat 13:53]--[2022-04-30 Sat 15:08] =>  1:15
CLOCK: [2022-04-30 Sat 13:13]--[2022-04-30 Sat 13:53] =>  0:40
CLOCK: [2022-04-30 Sat 20:28]--[2022-04-30 Sat 23:34] =>  3:06
CLOCK: [2022-04-30 Sat 17:20]--[2022-04-30 Sat 17:59] =>  0:39
:END:
entry point of the facility. it will:
1. start a session(set ~dedicated-session-in~ to ~t~)
2. call ~dedicated-session-dumping~
   after dumping finished, enter next phase like magit commit
3. call ~dedicated-session-doing~
*** DONE ~dedicated-session-dumping~
CLOSED: [2022-05-03 Tue 17:47]
:LOGBOOK:
- State "DONE"       from "TODO"       [2022-05-03 Tue 17:47]
:END:
(if use elscreen, could create a new screen and do that)
1. prompt for input of value of ~dedicated-session-topic~
2. create entry with time and "dedicated session: " dedicated-session-topic and the entry for dumping
3. record the start time with ~dedicated-session-record-time~
4. display prompts from source in a popup buffer
5. set ~dedicated-session-state~ to ~'dumping~
6. wait until user input signifying end of dumping(C-c C-c?)
7. call  ~dedicated-session-record-time~
8. return to ~dedicated-session~
*** TODO ~dedicated-session-doing~ [2/3]
:LOGBOOK:
CLOCK: [2022-05-03 Tue 17:49]--[2022-05-03 Tue 18:04] =>  0:15
:END:
1. set ~dedicated-session-in~ to ~'doing~
2. create entry of doing
3. call ~dedicated-session-bar-rest-toggle~
**** DONE ~dedicated-session-doing-bar-rest-toggle &optional done?~
CLOSED: [2022-05-03 Tue 18:30]
:LOGBOOK:
CLOCK: [2022-05-03 Tue 18:33]--[2022-05-03 Tue 18:35] =>  0:02
- State "DONE"       from "TODO"       [2022-05-03 Tue 18:30]
CLOCK: [2022-05-03 Tue 18:04]--[2022-05-03 Tue 18:30] =>  0:26
:END:
1. will toggle the ~dedicated-session-doing-state~ to bar/rest,
2. find the last bar/rest. if there's none, create one
3. call ~dedicated-session-record-time~,
4. if ~done?~ is ture, meaning it's called by ~dedicated-session-releasing~, that the doing stage is done, so no new insert. and return.
5. otherwise,
   1. create new rest/bar entry,
   2. call ~dedicated-session-record-time~,
   3. if it's a bar, message "bar no.X starting"
   4. if it's a rest, call ~dedicated-session-doing--rest-prompt~
   5. return
**** TODO ~dedicated-session-doing-rest-prompt~
:LOGBOOK:
CLOCK: [2022-05-03 Tue 20:56]--[2022-05-03 Tue 21:44] =>  0:48
:END:
1. start a new org buffer
2. insert content from ~dedicated-session-rest-collect~
3. popup a window, and give it the buffer
4. wait for user input to call ~dedicated-session-doing-bar-rest-toggle~ and return
**** DONE ~dedicated-session-rest-collect~
CLOSED: [2022-05-03 Tue 21:46]
:LOGBOOK:
- State "DONE"       from "TODO"       [2022-05-03 Tue 21:46]
CLOCK: [2022-05-03 Tue 21:46]--[2022-05-03 Tue 21:46] =>  0:00
:END:
1. go to the source file
2. filter rest methods with the ~dedicated-session-state~ as tags
3. return the filtered rest methods 
*** DONE ~dedicated-session-releasing~
CLOSED: [2022-05-04 Wed 16:13]
:LOGBOOK:
CLOCK: [2022-05-04 Wed 15:45]--[2022-05-04 Wed 16:13] =>  0:28
- State "DONE"       from "TODO"       [2022-05-04 Wed 16:13]
:END:
manualy called.
1. call ~dedicated-session-bar-rest-toggle t~, to end the last bar/rest
2. call ~dedicated-session-end~
**** DONE ~dedicated-session-end~
CLOSED: [2022-05-04 Wed 15:58]
:LOGBOOK:
- State "DONE"       from "TODO"       [2022-05-04 Wed 15:58]
:END:
1. open a capture buffer just like magit commit
2. prompt for summary log
3. after recieving C-c C-c, goto the journal file buffer, create the releasing heading and save the log in journal
4. prompt for rest with methods returned by ~dedicated-session-rest-collect 'releasing~
5. after recieving C-c C-c, meaning that the rest ended, set ~dedicated-session-state~ to nil
6. message dedicated session of ~dedicated-session-topic~ ended
7. set ~dedicated-session-doing-topic~ nil
*** DONE ~dedicated-session-log~
CLOSED: [2022-05-04 Wed 15:46]
:LOGBOOK:
- State "DONE"       from "TODO"       [2022-05-04 Wed 15:46]
CLOCK: [2022-05-04 Wed 14:37]--[2022-05-04 Wed 15:46] =>  1:09
:END:
this function log notes in the corresponding entry in the journal file
1. display a capture buffer
2. after recieving C-c C-c, goto journal file buffer, create an entry under the ~logs~ (if it's not present, create one) with heading at (current time - start - time), and insert the note under that entry.
