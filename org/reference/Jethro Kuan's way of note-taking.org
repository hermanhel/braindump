:PROPERTIES:
:ID:       8DC2D01C-1B93-4046-BA96-551F4D2D2AC4
:ROAM_REFS: https://jethrokuan.github.io/org-roam-guide/
:END:
#+title: Jethro Kuan's way of note-taking
#+HUGO_SECTION:reference
#+filetags: :draft:
* Machine
** slipbox setup
#+begin_example
.
├── articles
├── main
├── reference
├── inbox.org
└── biblio.bib
#+end_example
** tools
#+caption:capture template
#+begin_src emacs-lisp
  (setq org-roam-capture-templates
      '(("m" "main" plain
         "%?"
         :if-new (file+head "main/${slug}.org"
                            "#+title: ${title}\n")
         :immediate-finish t
         :unnarrowed t)
        ("r" "reference" plain "%?"
         :if-new
         (file+head "reference/${title}.org" "#+title: ${title}\n")
         :immediate-finish t
         :unnarrowed t)
        ("a" "article" plain "%?"
         :if-new
         (file+head "articles/${title}.org" "#+title: ${title}\n#+filetags: :article:\n")
         :immediate-finish t
         :unnarrowed t)))

#+end_src

#+caption:property type display in find-node
#+begin_src emacs-lisp
  (cl-defmethod org-roam-node-type ((node org-roam-node))
    "Return the TYPE of NODE."
    (condition-case nil
        (file-name-nondirectory
         (directory-file-name
          (file-name-directory
           (file-relative-name (org-roam-node-file node) org-roam-directory))))
      (error "")))
  (setq org-roam-node-display-template
        (concat "${type:15} ${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
#+end_src

#+caption:thought capturing(original)
#+begin_src emacs-lisp
  (push
        ;; other capture templates
        '("s" "Slipbox" entry  (file "~/Notes/RoamNotes/inbox.org")
         "* %?\n")
        org-capture-templates)
  
  (defun jethro/org-capture-slipbox ()
    (interactive)
    (org-capture nil "s"))
#+end_src

#+caption:cite to refrence node
#+begin_src emacs-lisp
(defun jethro/org-roam-node-from-cite (keys-entries)
    (interactive (list (citar-select-ref :multiple nil :rebuild-cache t)))
    (let ((title (citar--format-entry-no-widths (cdr keys-entries)
                                                "${author editor} :: ${title}")))
      (org-roam-capture- :templates
                         '(("r" "reference" plain "%?" :if-new
                            (file+head "reference/${citekey}.org"
                                       ":PROPERTIES:
:ROAM_REFS: [cite:@${citekey}]
:END:
#+title: ${title}\n")
                            :immediate-finish t
                            :unnarrowed t))
                         :info (list :citekey (car keys-entries))
                         :node (org-roam-node-create :title title)
                         :props '(:finalize find-file))))
#+end_src

#+caption:make nodes tagged draft
#+begin_src emacs-lisp
(defun jethro/tag-new-node-as-draft ()
  (org-roam-tag-add '("draft")))
(add-hook 'org-roam-capture-new-node-hook #'jethro/tag-new-node-as-draft)
#+end_src
** flow
*** Reference notes
1. [Find sources] Use /Zotero Web Connector/ to add source into /Zotero/
2. [sync .bib] /BetterBibTex/ sync /Zotero Libray/ into ~biblio.bib~ in ~org-roam-directory~ path.
3. [Generate Note] call ~jethro/org-roam-node-from-cite~, select reference, and generate a note under ~reference~.
4. [Read and take note] Read the source, with multiple passes and anotation. Then jot the notes, link to existing zettels.
*** original thoughts
1. call ~jethro/org-capture-slipbox~ to capture thoughts into ~inbox.org~.
2. revisit notes in ~inbox.org~ after times, pass mature notes into ~main~.

* Principles

** Notes are to *serve* writer later on

** Bad Behaviours

*** Too much notes (copying)

*** Note about everything

*** Complex Note method

** Benchmark for good Zettels

*** Zettels should be Atomic

*** Encapsulated

** Keep Task management seperate
Keep a centralized todo management, avoiding broke window in the Zettels.

*** my opinion
I don't quite agree to that. I like the window to be broken for a bit, I like to mess in the room without worrying breaking delicate glass vase

Though a neat and concise look out is cool. I could just put a subtree like that in the front, and problems solved.

