+++
title = "clojurescript"
author = ["System Administrator"]
draft = false
+++

clojure, but compile into ECMAScript


## Hello cljs {#hello-cljs}


### project {#project}

```text
hello-world        # Our project folder
├─ src             # The CLJS source code for our project
│  └─ hello_world  # Our hello_world namespace folder
│     └─ core.cljs # Our main file
├─ cljs.jar        # (Windows only) The standalone Jar you downloaded earlier
└─ deps.edn        # (macOS/Linux only) A file for listing our dependencies
```

```clojurescript
{:deps {org.clojure/clojurescript {:mvn/version "1.10.758"}}}
```

<div class="src-block-caption">
  <span class="src-block-number">Code Snippet 1</span>:
  deps.edn
</div>


### run the project {#run-the-project}

```shell
#in the project directory
  clj -M --main cljs.main --compile hello-world.core --repl
```

<div class="src-block-caption">
  <span class="src-block-number">Code Snippet 2</span>:
  macOS/Linux
</div>

```shell
java -cp "cljs.jar;src" cljs.main --compile hello-world.core --repl
```

<div class="src-block-caption">
  <span class="src-block-number">Code Snippet 3</span>:
  windows
</div>


#### the command flags {#the-command-flags}

-   `clj --main cljs.main` invokes `cljs.main` function
-   `--compile hello-world.core` compile `hello-world.core` namespace
-   `--repl` launch repl.
-   `--help` to see other #+OPTIONS: 0
-   `--serve` simple web server. no repl, but the code would work on local:9000.
-   `--target` who the code are generated for. Node.js(node) or Browser(default).
-   `--output-to` which file the output code goes to
-   `--repl-env` specify the environment of repl to be browser REPL(default) or node.


#### repl {#repl}

a webpage poped up, saying it's the page hosting the repl.

{{< figure src="/Users/hermanhe/Notes/RoamNotes/repl.png" width="600px" >}}

<!--list-separator-->

-  `js` namespace

    could use `(js/alert STRING)` to pop an alert in the browser.

<!--list-separator-->

-  speed

    `(time)` showes "Elapsed time: 0.000000 msecs", but it takes a while to response. I guess the lagging is in the connection.

<!--list-separator-->

-  recompile/reload namespace

    `(require '[hello-world.core :as hello] :reload)`
    don't forget that you defined the function in a ns, not `user` ns.


### Production Build {#production-build}

the compiler + google closure compiler provide optimization options with `--optimization` flag.

|      |          |            |        |
|------|----------|------------|--------|
| none | advanced | whitespace | simple |

are 4 available options.

`Longer build time` when in optimization enabled.


### run on Node.js {#run-on-node-dot-js}


#### install Node.js {#install-node-dot-js}

Node.js (&gt;= 0.12.X) are supported


#### enable source mapping {#enable-source-mapping}

```shell
npm install source-map-support
```


#### compile {#compile}

```shell
clj -M -m cljs.main --target node --output-to main.js -c hello-world.core

```

report error `js/alert is not defined`. Guess because there's no browser.


#### Node.js REPL {#node-dot-js-repl}

```sh
clj -M -m cljs.main --repl-env node
```


### Dependencies {#dependencies}


#### including `React` {#including-react}

```clojurescript
{:deps {org.clojure/clojurescript {:mvn/version "1.10.758"}
	cljsjs/react-dom {:mvn/version "16.2.0-3"}}}
```

<div class="src-block-caption">
  <span class="src-block-number">Code Snippet 4</span>:
  deps.edn
</div>


## Project Setup {#project-setup}

[official website](https://clojurescript.org/guides/project-templates) included several templates.
Good news Leiningen still work with cljs.