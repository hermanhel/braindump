+++
title = "Note-taking"
author = ["System Administrator"]
draft = false
+++

Note-taking is a skill and art of writing notes to record one's thinking

Different flow could be seperately declared by:

-   Material of reflex
    -   reality(nature)
    -   article
    -   someone's work
    -   tutorial/textbook
-   Time(context)
    -   in leisure
    -   in work(about work)
    -   in class
-   objective
    -   machine (to build a flow)
    -   principle (to test)
    -   facts
    -   plan (project machine)


## Jethro's Note taking {#jethro-s-note-taking}

I read [Jethro's How I take notes with Org-roam](https://jethrokuan.github.io/org-roam-guide/) and was really inspired.

A good thing is that I do very similar thing like him. The difference is that I aim at being a scholar, with bunch of original ideas(an idea generator!) , but as I'm still a student now, I learn from material mostly. Therefore, I could (and will be very happy to) integrate most of his practice without further adjustment into my machine.


### <span class="org-todo todo TODO">TODO</span> Integrating Jethro's practice {#integrating-jethro-s-practice}


#### <span class="org-todo todo TODO">TODO</span> Reconstruct the RoamNote folder (slipbox setup) {#reconstruct-the-roamnote-folder--slipbox-setup}

<!--list-separator-->

- <span class="org-todo done DONE">DONE</span>  all current goes into main

    <!--list-separator-->

    - <span class="org-todo done DONE">DONE</span>  change all occurance of resource

        if it's "./resource/filename" then there's nothing to change. otherwise, change "resource" into "main/resource". It's relative, so nothing to chagne. Yeah! just move everything into main.

        {{< figure src="/ox-hugo/test.png" width="600px" >}}

<!--list-separator-->

- <span class="org-todo done DONE">DONE</span>  new folders

    -   Reference: for ingesting materials like articles and website tutorials and textbooks. Typically, I place navigation and description of subconcepts of a field in the Main folder. This is an accent on the principle that `I personally actively wrote these descriptions rather than copying and pasting`.
    -   Main: for all refined notes
    -   inbox.org: for all first sight notes. Nodes in inbox. Put them in a file for conveniance of checking and going back to, with newbie priviledge.
    -   Machine: for all refined machines. when a machine is complete and working in inbox.org, move it into Machine.
    -   Dailies: Jethro don't use it anymore, But I'm a huge user of it. It's like my everyday draftbook. the plans, morning pages,.etc. The date information is typically for a couple of following days to find a thing/project that's on my mind recently. When I don't know where to put a thing, I put it into the daily page.
    -   Articles: just like jethro having it, for combined writing to illustrate some points.

    I'm thinking of a standalone folder for linear algebra, calculus, etc, but it seems not worth a standalone, because they are just ideas like others. Maybe I'll have to tag them for which part is referenced and which part is my own creation, but I'll leave it to then.

    result:

    ```text
    .
    |-- articles
    |-- bibliography.bib
    |-- daily
    |-- inbox.org
    |-- machine
    |-- main
    `-- reference
    ```

<!--list-separator-->

- <span class="org-todo todo TODO">TODO</span>  the capture templates and display functions

    <!--list-separator-->

    - <span class="org-todo done DONE">DONE</span>  display

        <!--list-separator-->

        -  property: type

            ```emacs-lisp
            (cl-defmethod org-roam-node-type ((node org-roam-node))
              "Return the TYPE of NODE."
              (condition-case nil
                  (file-name-nondirectory
                   (directory-file-name
            	(file-name-directory
            	 (file-relative-name (org-roam-node-file node) org-roam-directory))))
                (error "")))

            ```

        <!--list-separator-->

        -  Display template

            ```emacs-lisp
            (setq org-roam-node-display-template
                  (concat "${type:10} ${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
            ```

    <!--list-separator-->

    -  capture templates

        ```emacs-lisp
        (setq org-roam-capture-templates
              '(("m" "main" plain
        	 "%?"
        	 :if-new (file+head "main/${slug}.org"q
        			    "#+title: ${title}\n")
        	 :immediate-finish t
        	 :unnarrowed t)
        	("r" "reference" plain "%?"
        	 :if-new
        	 (file+head "reference/${title}.org" "#+title: ${title}\n")
        	 :immediate-finish t
        	 :unnarrowed t)
        	("a" "article" plain "%?"
        	 :if-new
        	 (file+head "articles/${title}.org" "#+title: ${title}\n#+filetags: :article:\n")
        	 :immediate-finish t
        	 :unnarrowed t)
        	("h" "machine" plain "%?"
        	 :if-new
        	 (file+head "machine/${title}.org" "#+title: ${title}\n#+filetags: :machine:\n")
        	 :immediate-finish t
        	 :unnarrowed t)

        	))
        ```

    <!--list-separator-->

    -

    <!--list-separator-->

    - <span class="org-todo todo TODO">TODO</span>  Reference

        ```emacs-lisp
              (use-package citar
        	:custom
        	(citar-bibliography
        	 "~/Notes/RoamNotes/bibliography.bib")
        	)

              (defun jethro/org-roam-node-from-cite (keys-entries)
        	  (interactive (list (citar-select-ref :multiple nil :rebuild-cache t)))
        	  (let ((title (citar--format-entry-no-widths (cdr keys-entries)
        						      "${author editor} :: ${title}")))
        	    (org-roam-capture- :templates
        			       '(("r" "reference" plain "%?" :if-new
        				  (file+head
        				   "reference/${citekey}.org"
          ":PROPERTIES:
        :ROAM_REFS: [cite:@${citekey}]
        :END:
        #+title: ${title}\n"
        				   )
        				  :immediate-finish t
        				  :unnarrowed t))
        			       :info (list :citekey (car keys-entries))
        			       :node (org-roam-node-create :title title)
        			       :props '(:finalize find-file))))


        ```

        Refer to this post of Jethro's

    <!--list-separator-->

    -  draft hook

        ```emacs-lisp
        (defun jethro/tag-new-node-as-draft ()
          (org-roam-tag-add '("draft")))
        (add-hook 'org-roam-capture-new-node-hook #'jethro/tag-new-node-as-draft)
        ```

<!--list-separator-->

- <span class="org-todo todo TODO">TODO</span>  Record the folder informations.

    They are recorded here. and in


#### <span class="org-todo todo TODO">TODO</span> Reconstruct Note-taking machine {#reconstruct-note-taking-machine}


## Zettelkasten {#zettelkasten}

Zettelkasten note is note that:

-   is small
-   is context-free
-   is atomic
-   have link in between one another


### Writing Zettelkasten note. {#writing-zettelkasten-note-dot}

A well writen Zettelkasten notes looks like this:

```text
#+title: Note-taking
Note-taking is xxxxxxxxxxxxxxx.

*some relevent topics, relation to other concepts
```


#### title {#title}

Idealy, the title should be a word that describe the concept very good.

But when there's no such word available, a short sentence is also OK


#### Description {#description}

should be very concise, with high SNR.


#### relevent topics {#relevent-topics}

Things grow tricky when coming to sub topics of a concept(topic). Particularly in length.

Some times a subtopic could very large, with much things to discuss about. In that scenario, could make that subtopic standalone, and replaced the heading with the relation of the subtopic and the current topic.

a example is this node. _Writing Zettelkasten note_ could be far larger a topic than everything else discussed in the node _Zettelkasten_. When the _Writing_ grow very large, could make it standalone.