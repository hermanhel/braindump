+++
title = "CPT101"
author = ["System Administrator"]
draft = false
+++

CPT101 is into Computer System Architeture.
The class consist of the knowledge of the computer system, and a bit of assembly language programming in the assembly language used in C, a AMD RISC.
The class is slow and shallow. **Recommanded Method is Self Study and Go to the Professor for Problems**

[CPT101 Module Handbook](</ox-hugo/CPT Module Handbook_CPT101 AY21-22_S1.pdf>)


## ACTIVE CPT101 <span class="tag"><span class="agenda">agenda</span></span> {#active-cpt101}


## resources {#resources}


### Textbook {#textbook}

_Computer Systems Architecture: A Networking Approach._ by Rob Williams
I have a copy of it. This is the mandatory textbook.


### Lecture Slides {#lecture-slides}

Lecture slides are often released a week before.
The professor would be covering the exact content of the slids.
Maybe base of Exams.


#### Week 5 {#week-5}

[Lecture 07](</ox-hugo/CS102-pdf-07 LS.pdf>)


#### All slides and lab material: {#all-slides-and-lab-material}

[CPT101 resource](~/Notes/NoteAttachments/PDF/CPT101/)


### Online Resources {#online-resources}

I would say MIT OCW definitely have courses under the topic.


## Tutoring Schedule {#tutoring-schedule}


### <span class="org-todo done DONE">DONE</span> Lecture ESG09 {#lecture-esg09}


### <span class="org-todo done DONE">DONE</span> Comp Lab SD554 {#comp-lab-sd554}

Class D1/4
only in week 5,6,9


### Office Hour {#office-hour}


## Tasks {#tasks}


### <span class="org-todo done DONE">DONE</span> Preview #1 {#preview-1}


### <span class="org-todo done DONE">DONE</span> Preview #2 {#preview-2}


### <span class="org-todo done DONE">DONE</span> Study for Assesment 1 and 2 <code>[0/24]</code> {#study-for-assesment-1-and-2}

Basically get everything learned and refered at hand

-   [ ] Lecture 1
-   [ ] Lecture 2
-   [ ] Lecture 3
-   [ ] Lecture 4
-   [ ] Lecture 5
-   [ ] Lecture 6
-   [ ] Lecture 7
-   [ ] Lecture 8
-   [ ] Lecture 9
-   [ ] Lecture 10
-   [ ] Lecture 11
-   [ ] Lecture 12
-   [ ] Lecture 13
-   [ ] Lecture 14
-   [ ] Lecture 15
-   [ ] Lecture 16
-   [ ] Lecture 17
-   [ ] Lecture 18
-   [ ] Lecture 20
-   [ ] Lecture 21
-   [ ] Lecture 19
-   [ ] Lecture 22
-   [ ] Lecture 23
-   [ ] Lecture 24


### <span class="org-todo done DONE">DONE</span> Assesment 1 and 2 {#assesment-1-and-2}

it start at 13:00 and end at 13:40.
Sequential 4 questions


### <span class="org-todo done DONE">DONE</span> Build the CPT101 Node<code>[3/3]</code> {#build-the-cpt101-node}

1.  [X] Important dates
2.  [X] Check info in email
3.  [X] Add task of importance.(the test)


### <span class="org-todo done DONE">DONE</span> Final exam {#final-exam}


### <span class="org-todo done DONE">DONE</span> Review CPT101 <code>[2/6]</code> {#review-cpt101}


#### 做法 {#做法}

使用Feynman Technique，和Active Recall。
Feynman Technique的重点是理解，AR的重点是具体和具体的Chunk。

1.  设定Chunk
2.  建立模型
3.  做出解释（文章）
4.  修改Chunk
5.  Chunk编号进入Anki


#### <span class="org-todo todo TODO">TODO</span> Computer Syste Architecture {#computer-syste-architecture}

<!--list-separator-->

- <span class="org-todo todo TODO">TODO</span>  Data Storage

<!--list-separator-->

- <span class="org-todo todo TODO">TODO</span>  OS

<!--list-separator-->

- <span class="org-todo todo TODO">TODO</span>  Models

<!--list-separator-->

- <span class="org-todo todo TODO">TODO</span>  Hierachy

    1.  Hardware
    2.  OS procedure
        1.  Kernel
        2.  API
    3.  User code

<!--list-separator-->

-  Features

    <!--list-separator-->

    -  Backward Compatibility

        When written: Old machine
        can run on: New machine


#### <span class="org-todo todo TODO">TODO</span> Instruction execution {#instruction-execution}

<!--list-separator-->

- <span class="org-todo todo TODO">TODO</span>  Complier

<!--list-separator-->

- <span class="org-todo todo TODO">TODO</span>  Intepreter


#### <span class="org-todo done DONE">DONE</span> Assembly programing {#assembly-programing}

<!--list-separator-->

- <span class="org-todo todo TODO">TODO</span>  Instructions

<!--list-separator-->

- <span class="org-todo todo TODO">TODO</span>  Stack

<!--list-separator-->

- <span class="org-todo todo TODO">TODO</span>  IO

<!--list-separator-->

- <span class="org-todo todo TODO">TODO</span>  Subroutine

<!--list-separator-->

- <span class="org-todo todo TODO">TODO</span>  Parameters

<!--list-separator-->

- <span class="org-todo todo TODO">TODO</span>  control flow

<!--list-separator-->

- <span class="org-todo todo TODO">TODO</span>  instructions


#### <span class="org-todo todo TODO">TODO</span> Data representation {#data-representation}

<!--list-separator-->

- <span class="org-todo todo TODO">TODO</span>  Char

<!--list-separator-->

- <span class="org-todo todo TODO">TODO</span>  Number


#### <span class="org-todo done DONE">DONE</span> Logic circuits {#logic-circuits}


#### <span class="org-todo todo TODO">TODO</span> Make a reference note. {#make-a-reference-note-dot}

Use PS 导出，画板至PDF


### <span class="org-todo todo TODO">TODO</span> Question tutor session {#question-tutor-session}

Preserve a time for the


## Log {#log}


### <span class="timestamp-wrapper"><span class="timestamp">&lt;2021-10-11 Mon&gt; </span></span> Lecture {#lecture}

0:00:16
:


0:48:28
: Installed succecfully pdf-tools.el

1:00:22
: Find pdf-annot not available


## Outline {#outline}


### Knowledge {#knowledge}


#### Computer system structure {#computer-system-structure}


#### Processor Structure/Behavior {#processor-structure-behavior}


#### Memory Behavior {#memory-behavior}

<!--list-separator-->

-  Storages

    <!--list-separator-->

    -  Representation of number/string

        <!--list-separator-->

        -  Ascii charactor

            every ascii charactor holds 8 bits

        <!--list-separator-->

        -  BCD(binary-coded decimal) for unsigned integers

            Each decimal digit =&gt; 4 bits of binary.

            <!--list-separator-->

            -  Compared to binary

                less economical(space)
                difficult calculation
                easy translation to character form(ascii 5 01100101, BCD 5 0101)

        <!--list-separator-->

        -  Complementary representation

            Use half of the range to denote negative integers

            <!--list-separator-->

            -  method

                x - y = x + -y

                the overflow will take away the highest digit.

    <!--list-separator-->

    -  bit, Byte, word, Mbyte

    <!--list-separator-->

    -  Storage of video/audio


### Assembly Language {#assembly-language}


#### Assembly language Behavior {#assembly-language-behavior}

<!--list-separator-->

-  I/O

    <!--list-separator-->

    -  output

        ```assembly
        lea eax,format
        push eax
        call printf
        add esp,4
        ```

        Equivalent to `printf("Hello World\n);`

        1.  push the second parameter (integer variable) (to the stack)
        2.  push the first parameter (address of string)
        3.  call `printf` routine
        4.  clean up top 2 position of the stack

<!--list-separator-->

-  Subroutine


#### instructions {#instructions}

Cheat Sheet:

| `Instruction` | Meaning | Behavior |
|---------------|---------|----------|
|               |         |          |

<!--list-separator-->

-  POP


## used Code {#used-code}

```emacs-lisp
(defun p-progress-list ()
  "insert lecture 1/2/3/4/..."
  ;; (interactive)

   (let (i)
     (setq i 1)
  (while (<= i 24)
    (progn
      ;; (insert "+ [ ] Lec")
      ;; (insert (number-to-string i)
      (insert (format "+ [ ] Lecture %d" i))
      (setq i (1+ i))
      (insert "\n")
      )
    )
  )
   )

)

























```